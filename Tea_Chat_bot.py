import telebot
from telebot import types

#bot = telebot.TeleBot(token="8057253291:AAGJ6XypfwO4-WrY897HO7E9BlnDaDp6E6g")

test_points = {}

r_file = 'rating.txt'
rating_user1 = {}

import os
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env file
bot = telebot.TeleBot(os.environ.get('BOT_TOKEN'))

from flask import Flask, request

server = Flask(__name__)

@server.route('/' + os.environ.get('BOT_TOKEN'), methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200

@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://your-render-app-name.onrender.com/' + os.environ.get('BOT_TOKEN'))
    return "Webhook set!", 200

if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))


def load_rating():
    with open(r_file, 'r', encoding='utf-8') as f:
        for line in f:
            user_id, tea_type, rating = line.strip().split(':')
            rating_user1.setdefault(int(user_id), {})[tea_type] = int(rating)

@bot.message_handler(commands=['afterword'])
def start(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    bot.send_message(chat_id, """üåø *–ü–æ—Å–ª–µ—Å–ª–æ–≤–∏–µ* üåø

–ù–µ –Ω–∞–¥–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —á–∞–π, –∫–∞–∫ –ø–æ–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ
–≠—Ç–æ –ª–∏—à—å —Å–æ–≤–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–≤–∞—Ä–∏—Ç—å, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ –ª—É—á—à–µ

_–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É_
""", parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def start(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    bot.send_message(chat_id, """üÜò *–¢—ã –ø—Ä–∏–∑–≤–∞–ª –ø–æ–º–æ—â—å* üÜò

–≠—Ç–æ—Ç –í–µ–ª–∏–∫–∏–π –±–æ—Ç –∏–º–µ–µ—Ç –¥–≤–µ –≥–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚ö°Ô∏è –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —á–∞–π –ø–æ –∂–µ–ª–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚ö°Ô∏è –†–∞—Å—Å–∫—Ä—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫–æ–π –æ–Ω —á–∞–π

–¢–∞–∫–∂–µ —ç—Å—Ç—å –≥–µ–Ω–∏—è–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞–π, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É —á–∞—é –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ä–µ–¥–Ω—é—é

–°–ø–µ—Ä–≤–∞ –Ω–∞–ø–µ—Ä–≤–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏ /start
""", parse_mode="Markdown")
                    
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEO6M9oGiM9bGoj1XsxoDCVId_B2iwk9wACbV4AAlchOUtBSAABpOELi1M2BA")
    bot.send_message(chat_id, "üêâ *–í–µ–ª–∏–∫–∏–π —á–∞–µ–≤–µ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è!* üêâ", parse_mode="Markdown")
    mode1(message)

def mode1(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    tea = types.InlineKeyboardButton(text="–í—ã–±–æ—Ä —á–∞—è", callback_data="tea") 
    test = types.InlineKeyboardButton(text="–¢–µ—Å—Ç ¬´–ö–∞–∫–æ–π —Ç—ã —á–∞–π?¬ª", callback_data="test") 
    keyboard.add(tea, test)
    bot.send_message(message.chat.id, """–ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["tea", "test"]) 
def callback_inline(call): 
    if call.message: 
        if call.data == "tea":
            tea(call.message)
            menu11(call.message)
        elif call.data == "test": 
            test(call.message)
            menu11(call.message)

def tea(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    medicine = types.InlineKeyboardButton(text="–õ–µ—á–µ–Ω–∏–µ", callback_data="medicine") 
    lose_weight = types.InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="lose_weight")
    other = types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="other") 
    keyboard.add(medicine, lose_weight, other) 
    bot.send_message(message.chat.id, "üçµ –î–ª—è —á–µ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–∏—Ç—å —á–∞–π?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["medicine", "lose_weight", "other"]) 
def callback_inline(call): 
    if call.message: 
        if call.data == "medicine":
            medicine(call.message)
        elif call.data == "lose_weight": 
            lose_weight(call.message)
        elif call.data == "other": 
            other(call.message)

def medicine(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    vitamins = types.InlineKeyboardButton(text="–ê–≤–∏—Ç–∞–º–∏–Ω–æ–∑", callback_data="vitamins")
    cold = types.InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç—É–¥–∞", callback_data="cold")
    headache = types.InlineKeyboardButton(text="–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", callback_data="headache")
    sleep = types.InlineKeyboardButton(text="–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–Ω–æ–º", callback_data="sleep")
    fatigue = types.InlineKeyboardButton(text="–£—Å—Ç–∞–ª–æ—Å—Ç—å", callback_data="fatigue")
    keyboard.add(vitamins, cold, headache, sleep, fatigue)
    
    bot.send_message(message.chat.id, "üå° –ß—Ç–æ –±–æ–ª–∏—Ç?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["vitamins", "cold", "headache", "sleep", "fatigue"]) 
def callback_inline1(call): 
    if call.message: 
        if call.data == "vitamins":
            vitamins(call.message)
            
        elif call.data == "cold": 
            cold(call.message)
            
        elif call.data == "headache": 
            headache(call.message)
            
        elif call.data == "sleep": 
            sleep(call.message)
            
        elif call.data == "fatigue": 
            fatigue(call.message)

def vitamins(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    kid = types.InlineKeyboardButton(text="–†–µ–±–µ–Ω–æ–∫", callback_data="kid")
    adult = types.InlineKeyboardButton(text="–í–∑—Ä–æ—Å–ª—ã–π", callback_data="adult")
    keyboard.add(kid, adult)
    
    bot.send_message(message.chat.id, "ü§® –ö—Ç–æ —Ç—ã?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["kid", "adult"]) 
def callback_inline2(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "kid":
            photo_path = "Tea_kid.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–î–µ—Ç—Å–∫–∏–π —á–∞–π ¬´–í–∏—Ç–∞–º–∏–Ω–Ω—ã–π¬ª* üçµ
–ü–æ–º–æ–≥–∞–µ—Ç –æ–±–æ–≥–∞—Ç–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏, –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏ –∏ ‚Ä®–º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

*C–æ—Å—Ç–∞–≤:*
- –¶–≤–µ—Ç–∫–∏ –∞–ø—Ç–µ—á–Ω–æ–π —Ä–æ–º–∞—à–∫–∏
- –¢—Ä–∞–≤–∞ –¥—É—à–∏—Ü—ã ‚Ä®–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–π
- –ü–ª–æ–¥—ã —à–∏–ø–æ–≤–Ω–∏–∫–∞ –º–∞–π—Å–∫–æ–≥–æ
- –¢—Ä–∞–≤–∞ —Ç–∏–º—å—è–Ω–∞ –ø–æ–ª–∑—É—á–µ–≥–æ (—á–∞–±—Ä–µ—Ü–∞)
- –¢—Ä–∞–≤–∞ ‚Ä®–º—è—Ç—ã –ø–µ—Ä–µ—á–Ω–æ–π
""", parse_mode="Markdown")

            ask_for_rating(call.message, "kid")

        elif call.data == "adult": 
            adult(call.message)

def adult(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    energy = types.InlineKeyboardButton(text="–î–µ—Ñ–∏—Ü–∏—Ç —ç–Ω–µ—Ä–≥–∏–∏", callback_data="energy")
    low_vitality = types.InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç—É–¥–∞", callback_data="low_vitality")
    immunity = types.InlineKeyboardButton(text="–ò–º—É–Ω–æ–¥–∏—Ñ–µ—Ü–∏—Ç", callback_data="immunity")
    keyboard.add(energy, low_vitality, immunity)
    
    bot.send_message(message.chat.id, """üìã –ö–∞–∫–∏–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ —Ç—ã –Ω–∞–±–ª—é–¥–∞–µ—à—å?""", reply_markup=keyboard, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data in ["energy", "low_vitality", "immunity"]) 
def callback_inline3(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "energy":
            photo_path = "Tea_adult_grass.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π ¬´–í–∏—Ç–∞–º–∏–Ω–Ω—ã–π¬ª* üçµ
–ß–∞–π –æ–±–ª–∞–¥–∞–µ—Ç —Ç–æ–Ω–∏–∑–∏—Ä—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º, –≤–æ—Å–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ñ–∏—Ü–∏—Ç ‚Ä®—ç–Ω–µ—Ä–≥–∏–∏, –ø–æ–≤—ã—à–∞–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, –ø—Ä–∏–¥–∞—ë—Ç –±–æ–¥—Ä–æ—Å—Ç—å

*–°–æ—Å—Ç–∞–≤:*
- –û–±–ª–µ–ø–∏—Ö–∞
- –î—É—à–∏—Ü–∞
- –ü–ª–æ–¥—ã —à–∏–ø–æ–≤–Ω–∏–∫–∞
- –õ–∏—Å—Ç—å—è –±—Ä—É—Å–Ω–∏–∫–∏, ‚Ä®–º–∞–ª–∏–Ω—ã, —Ä—è–±–∏–Ω—ã           
""", parse_mode="Markdown")
            ask_for_rating(call.message, "energy")
            
        elif call.data == "low_vitality":
            photo_path = "Tea_adult_Altai.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–§–∏—Ç–æ—á–∞–π ¬´–ê–ª—Ç–∞–π¬ª ‚Ññ15 ¬´–í–∏—Ç–∞–º–∏–Ω–∫–∞¬ª* üçµ
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–Ω—É—Å–∞. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∫ –æ–±—â–µ—É–∫—Ä–µ–ø–ª—è—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –≤ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å—Ç—É–¥ –∏ ‚Ä®–∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–æ–≤

*–°–æ—Å—Ç–∞–≤:*
- –¶–≤–µ—Ç–∫–∏ —Ä–æ–º–∞—à–∫–∏
- –õ–∏—Å—Ç—å—è —Å–º–æ—Ä–æ–¥–∏–Ω—ã
- –ü–ª–æ–¥—ã ‚Ä®—Ä—è–±–∏–Ω—ã –∫—Ä–∞—Å–Ω–æ–π
- –õ–∏—Å—Ç—å—è –∫—Ä–∞–ø–∏–≤—ã
""", parse_mode="Markdown")
            ask_for_rating(call.message, "low_vitality")
            
        elif call.data == "immunity":
            photo_path = "Tea_adult_gift.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —á–∞–π ¬´–í–∏—Ç–∞–º–∏–Ω–Ω—ã–π¬ª* üçµ
–ß–∞–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ —É–∫—Ä–µ–ø–ª—è—Ç—å ‚Ä®–æ—Ä–≥–∞–Ω–∏–∑–º

*–°–æ—Å—Ç–∞–≤:*
- –õ–∏—Å—Ç—å—è –µ–∂–µ–≤–∏–∫–∏, –º—è—Ç—ã, –ª–∏–º–æ–Ω–Ω–∏–∫–∞, –∫–∞–ª–µ–Ω–¥—É–ª—ã
- –ö–æ–∂—É—Ä–∞ –∞–ø–µ–ª—å—Å–∏–Ω–∞
- –ë—Ä—É—Å–Ω–∏–∫–∞
- –ö–ª—É–±–Ω–∏–∫–∞
- –û–±–ª–µ–ø–∏—Ö–∞
""", parse_mode="Markdown")

        ask_for_rating(call.message, "immunity")

def cold(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    stress = types.InlineKeyboardButton(text="–í–æ—Å–ø–∞–ª–µ–Ω–∏—è", callback_data="stress")
    
    fever = types.InlineKeyboardButton(text="–ñ–∞—Ä", callback_data="fever")
    
    cold1 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç—É–¥–∞", callback_data="cold1")
    
    diarrhea = types.InlineKeyboardButton(text="–î–∏—Å–ø–µ–ø—Å–∏—è", callback_data="diarrhea")
    
    fatigue1 = types.InlineKeyboardButton(text="–£—Å—Ç–∞–ª–æ—Å—Ç—å", callback_data="fatigue1")
    keyboard.add(stress, fever, cold1, diarrhea, fatigue1)
    
    bot.send_message(message.chat.id, """üìã –ö–∞–∫–∏–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ —Ç—ã –Ω–∞–±–ª—é–¥–∞–µ—à—å?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["stress", "fever", "cold1", "diarrhea", "fatigue1"]) 
def callback_inline4(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "stress":
            photo_path = "Tea_honey.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π —Å –º—ë–¥–æ–º –∏ –ª–∏–º–æ–Ω–æ–º* üçµ
–õ—É—á—à–µ –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ–∫—Ä–µ–ø–∫–∏–º, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —á—ë—Ä–Ω—ã–π, —Ç–∞–∫ –∏ –∑–µ–ª—ë–Ω—ã–π —á–∞–π
–í –Ω–∞–ø–∏—Ç–æ–∫ ‚Ä®–¥–æ–±–∞–≤–ª—è—é—Ç 1 —á–∞–π–Ω—É—é –ª–æ–∂–∫—É –º—ë–¥–∞ –∏ 1‚Äì2 –¥–æ–ª—å–∫–∏ –ª–∏–º–æ–Ω–∞. –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ ‚Ä®—Å–≤–æ–π—Å—Ç–≤–∞ –º—ë–¥–∞ –∏ –ª–∏–º–æ–Ω–∞, –∏—Ö –Ω–µ –∫–ª–∞–¥—É—Ç –≤ –≥–æ—Ä—è—á–∏–π –Ω–∞–ø–∏—Ç–æ–∫

*–°–æ—Å—Ç–∞–≤:*
- –ß–∞–π —á–µ—Ä–Ω—ã–π/–∑–µ–ª–µ–Ω–Ω—ã–π
- –ú–µ–¥ –ø—á–µ–ª–∏–Ω–Ω—ã–π
- –õ–∏–º–æ–Ω
""", parse_mode="Markdown")
            ask_for_rating(call.message, "stress")
            
        elif call.data == "fever":
            photo_path = "Tea_raspberry.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π —Å –º–∞–ª–∏–Ω–æ–π –∏ –ª–∏–ø–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º* üçµ
–¢–∞–∫–æ–π —á–∞–π –æ–±–ª–∞–¥–∞–µ—Ç –ª–∏–ø–æ–≤–æ-–º–∞–ª–∏–Ω–æ–≤—ã–º –∞—Ä–æ–º–∞—Ç–æ–º –∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–æ—á–µ–≥–æ–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º

*–°–æ—Å—Ç–∞–≤:*
- –õ–∏–ø–æ–≤—ã–π —Ü–≤–µ—Ç
- –Ø–≥–æ–¥—ã –º–∞–ª–∏–Ω—ã
- –ß–µ—Ä–Ω—ã–π —á–∞–π
- –õ–∏–º–æ–Ω
- –°–∞—Ö–∞—Ä(–ø–æ –≤–∫—É—Å—É)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "immunity")
            
        elif call.data == "cold1":
            photo_path = "Tea_ginger.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ò–º–±–∏—Ä–Ω—ã–π —á–∞–π* üçµ
–ò–º–±–∏—Ä–Ω—ã–π —á–∞–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞, —Ç–∞–∫ –∫–∞–∫ –∏–º–±–∏—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏—Ç–∞–º–∏–Ω—ã, –º–∏–Ω–µ—Ä–∞–ª—ã –∏ —ç—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞

*–°–æ—Å—Ç–∞–≤:*
- –õ–∏–º–æ–Ω
- –ò–º–±–∏—Ä—å
- –ú–µ–¥
- –ì–≤–æ–∑–¥–∏–∫–∞
""", parse_mode="Markdown")
            ask_for_rating(call.message, "cold1")
            
        elif call.data == "diarrhea":
            photo_path = "Tea_chamomile.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–†–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π* üçµ
–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç—Ä–∞–≤—è–Ω–æ–π –Ω–∞–ø–∏—Ç–æ–∫, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º–∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–º–∏ –∏ –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏

*–°–æ—Å—Ç–∞–≤:*
- –†–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π
- –ú–µ–¥(–ø—Ä–æ –≤–∫—É—Å—É)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "diarrhea")
            
        elif call.data == "fatigue1":
            photo_path = "Tea_currant.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π —Å –ª–∏—Å—Ç—å—è–º–∏ —á—ë—Ä–Ω–æ–π —Å–º–æ—Ä–æ–¥–∏–Ω—ã* üçµ
–¢–∞–∫–æ–π —á–∞–π —É–∫—Ä–µ–ø–ª—è–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–µ —Å–∏–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –≤ –ø–µ—Ä–∏–æ–¥ ‚Ä®–ø—Ä–æ—Å—Ç—É–¥—ã, —É–ª—É—á—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –∫—Ä–æ–≤–µ—Ç–≤–æ—Ä–µ–Ω–∏—è, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤, —É–∫—Ä–µ–ø–ª—è–µ—Ç ‚Ä®—Å—Ç–µ–Ω–∫–∏ —Å–æ—Å—É–¥–æ–≤

*–°–æ—Å—Ç–∞–≤:*
- –õ–∏—Å—Ç—å—è —á—ë—Ä–Ω–æ–π —Å–º–æ—Ä–æ–¥–∏–Ω—ã
- –õ–∏—Å—Ç—å—è –≤–∏—à–Ω–∏
- –°–º–æ—Ä–æ–¥–∏–Ω–∞ —á—ë—Ä–Ω–∞—è
- –ú—ë–¥ (–ø–æ –≤–∫—É—Å—É)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "fatigue1")
            
def headache(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    grasstea = types.InlineKeyboardButton(text="–¢—Ä–∞–≤—è–Ω–æ–π –Ω–∞—Å—Ç–æ–π", callback_data="grasstea")
    greentea = types.InlineKeyboardButton(text="–ó–µ–ª–µ–Ω—ã–π —á–∞–π", callback_data="greentea")
    fitotea = types.InlineKeyboardButton(text="–§–∏—Ç–æ —á–∞–π", callback_data="fitotea")
    keyboard.add(grasstea, greentea, fitotea)
    
    bot.send_message(message.chat.id, """üçÇ –ö–∞–∫–æ–π —Å–æ—Ä—Ç —á–∞—è —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø–∏—Ç—å?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["grasstea", "greentea", "fitotea"]) 
def callback_inline5(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "grasstea":
            photo_path = "Tea_chamomile.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–†–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π* üçµ
–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç—Ä–∞–≤—è–Ω–æ–π –Ω–∞–ø–∏—Ç–æ–∫, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º–∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–º–∏ –∏ –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏

*–°–æ—Å—Ç–∞–≤:*
- –†–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π
- –ú–µ–¥(–ø—Ä–æ –≤–∫—É—Å—É)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "grasstea")
            
        elif call.data == "greentea":
            photo_path = "Tea_green.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ó–µ–ª—ë–Ω—ã–π —á–∞–π —Å –ª–∏–º–æ–Ω–æ–º* üçµ
–ü–æ–ª–µ–∑–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã, —ç—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω –†. –û–Ω –æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ—á–µ–≥–æ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –ø–æ–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –∏ –ø—Ä–∏—Ç—É–ø–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–æ –≥–æ–ª–æ–¥–∞

*–°–æ—Å—Ç–∞–≤:*
- –ó–µ–ª–µ–Ω—ã–π —á–∞–π
- –õ–∏–º–æ–Ω
- –ú–µ–¥ (–ø–æ –≤–∫—É—Å—É)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "greentea")
            
        elif call.data == "fitotea":
            photo_path = "Tea_fito.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–°–∏–ª–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç—Ä–∞–≤ ‚Ññ7* üçµ
–§–∏—Ç–æ—á–∞–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –ø—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏ –ª—é–±–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞

*–°–æ—Å—Ç–∞–≤:*
- –ó–≤–µ—Ä–æ–±–æ–π
- –ö–∏–ø—Ä–µ–π
- –ú—è—Ç–∞ –ø–µ—Ä–µ—á–Ω–∞—è
- –ë–æ—è—Ä—ã—à–Ω–∏–∫
- –ü—É—Å—Ç—ã—Ä–Ω–∏–∫
- –í–∞–ª–µ—Ä–∏–∞–Ω–∞
""", parse_mode="Markdown")
            ask_for_rating(call.message, "fitotea")

def sleep(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    stress1 = types.InlineKeyboardButton(text="–°—Ç—Ä–µ—Å—Å", callback_data="stress1")
    
    anxiety = types.InlineKeyboardButton(text="–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", callback_data="anxiety")
    
    badsleep = types.InlineKeyboardButton(text="–ë–æ–¥—Ä–æ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", callback_data="badsleep")
    
    insomnia = types.InlineKeyboardButton(text="–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞", callback_data="insomnia")
    
    nervous = types.InlineKeyboardButton(text="–ù–µ—Ä–≤–æ–∑–Ω–æ—Å—Ç—å", callback_data="nervous")
    keyboard.add(stress1, anxiety, badsleep, insomnia, nervous)
    
    bot.send_message(message.chat.id, """üìã –ö–∞–∫–∏–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ —Ç—ã –Ω–∞–±–ª—é–¥–∞–µ—à—å?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["stress1", "anxiety", "badsleep", "insomnia", "nervous"]) 
def callback_inline6(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "stress1":
            photo_path = "Tea_chamomile.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–†–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π* üçµ
–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç—Ä–∞–≤—è–Ω–æ–π –Ω–∞–ø–∏—Ç–æ–∫, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º–∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–º–∏ –∏ –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏

*–°–æ—Å—Ç–∞–≤:*
- –†–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π
- –ú–µ–¥(–ø—Ä–æ –≤–∫—É—Å—É)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "stress1")
            
        elif call.data == "anxiety":
            photo_path = "Tea_mint.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π —Å –º—è—Ç–æ–π* üçµ
–î–µ–π—Å—Ç–≤–∏–µ —á–∞—è —Å –º—è—Ç–æ–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–≤—ã. –í –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º—è—Ç–∞ –æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞—Å—Ç–æ–π –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç –±–æ–¥—Ä—è—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç

*–°–æ—Å—Ç–∞–≤:*
- –õ–∏—Å—Ç—å—è –º—è—Ç—ã
- –í–æ–¥–∞
- –õ–∏–º–æ–Ω (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
- –°–∞—Ö–∞—Ä/–º–µ–¥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "anxiety")
            
        elif call.data == "badsleep":
            photo_path = "Tea_lavanda.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π –∏–∑ —Ü–≤–µ—Ç–æ–≤ –ª–∞–≤–∞–Ω–¥—ã* üçµ
–£–ª—É—á—à–∞–µ—Ç —Å–æ–Ω, —É–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç

*–°–æ—Å—Ç–∞–≤:*
- –ó–∞—Å—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã –ª–∞–≤–∞–Ω–¥—ã
- –°–≤–µ–∂–∞—è –º—è—Ç–∞
- –ú–µ–¥ (–ø–æ –≤–∫—É—Å—É)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "badsleep")

        elif call.data == "insomnia":
            photo_path = "Tea_valerian.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–Ω—è –≤–∞–ª–µ—Ä–∏–∞–Ω—ã* üçµ
–ß–∞–π —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏—é –≤–æ–∑–±—É–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è

*–°–æ—Å—Ç–∞–≤:*
- –ö–æ—Ä–µ–Ω—å –≤–∞–ª–µ—Ä—å—è–Ω—ã
- –ú–µ–¥
- –õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫
""", parse_mode="Markdown")
            ask_for_rating(call.message, "insomnia")
            
        elif call.data == "nervous":
            photo_path = "Tea_rosehip.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π —Å —à–∏–ø–æ–≤–Ω–∏–∫–æ–º* üçµ
–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ —à–∏–ø–æ–≤–Ω–∏–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ–º–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –∏–Ω—Ñ–µ–∫—Ü–∏—è–º, –ø—Ä–∏–Ω–∏–º–∞—é—Ç —É—á–∞—Å—Ç–∏–µ –≤ —É–≥–ª–µ–≤–æ–¥–Ω–æ–º –∏ –º–∏–Ω–µ—Ä–∞–ª—å–Ω–æ–º –æ–±–º–µ–Ω–µ.

*–°–æ—Å—Ç–∞–≤:*
- –®–∏–ø–æ–≤–Ω–∏–∫ —Å—É—à–µ–Ω–Ω—ã–π
- –ú–µ–¥
- –ö–æ—Ä–µ–Ω—å –∏–º–±–∏—Ä—è
- –õ–∏–º–æ–Ω
""", parse_mode="Markdown")
            ask_for_rating(call.message, "nervous")

def fatigue(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    vigor = types.InlineKeyboardButton(text="–ë–æ–¥—Ä–æ—Å—Ç—å", callback_data="vigor")
    fresh = types.InlineKeyboardButton(text="–°–≤–µ–∂–µ—Å—Ç—å", callback_data="fresh")
    tonization = types.InlineKeyboardButton(text="–¢–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="tonization")
    productivity = types.InlineKeyboardButton(text="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="productivity")
    vitamins2 = types.InlineKeyboardButton(text="–ü—Ä–∏–ª–∏–≤ –≤–∏—Ç–∞–º–∏–Ω–æ–≤", callback_data="vitamins2")
    keyboard.add(vigor, fresh, tonization, productivity, vitamins2)
    
    bot.send_message(message.chat.id, """üèÆ –î–ª—è —á–µ–≥–æ —Ç—ã –±—É–¥–µ—à—å –ø–∏—Ç—å —á–∞–π?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["vigor", "fresh", "tonization", "productivity", "vitamins2"]) 
def callback_inline7(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "vigor":
            photo_path = "Tea_puer.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ü—É—ç—Ä* üçµ
–ß–∞–π–Ω—ã–π –ª–∏—Å—Ç –ø—É—ç—Ä–∞ –±–æ–≥–∞—Ç –∫–æ—Ñ–µ–∏–Ω–æ–º
–ï—Å—Ç—å –¥–≤–µ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—É—ç—Ä–∞: —à—É –ø—É—ç—Ä (¬´—á—ë—Ä–Ω—ã–π¬ª, ‚Ä®–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏) –∏ —à—ç–Ω –ø—É—ç—Ä (¬´–∑–µ–ª—ë–Ω—ã–π¬ª, –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ ‚Ä®–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)

*–°–æ—Å—Ç–∞–≤:*
- –ü—É—ç—Ä —á–∞–π
""", parse_mode="Markdown")
            ask_for_rating(call.message, "vigor")
            
        elif call.data == "fresh":
            photo_path = "Tea_green1.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ó–µ–ª—ë–Ω—ã–π —á–∞–π* üçµ
–£—Ç—Ä–µ–Ω–Ω–∏–π –∑–µ–ª—ë–Ω—ã–π —á–∞–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∑–±–æ–¥—Ä–∏—Ç—å—Å—è, –Ω–æ –∏ —É–ª—É—á—à–∏—Ç—å –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Å–∂–∏–≥–∞–Ω–∏—é –∫–∞–ª–æ—Ä–∏–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—â–∏—â–∞—é—Ç –∫–ª–µ—Ç–∫–∏ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π

*–°–æ—Å—Ç–∞–≤:*
- –ó–µ–ª—ë–Ω—ã–π —á–∞–π
""", parse_mode="Markdown")
            ask_for_rating(call.message, "fresh")
            
        elif call.data == "tonization":
            photo_path = "Tea_oolong.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–£–ª—É–Ω* üçµ
–ü–æ–ª—É—Ñ–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–π, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –∑–µ–ª—ë–Ω—ã–º–∏ –∏ –∫—Ä–∞—Å–Ω—ã–º–∏ —á–∞—è–º–∏. –í –ö–∏—Ç–∞–µ —É–ª—É–Ω —á–∞—Å—Ç–æ –Ω–∞–∑—ã–≤–∞—é—Ç ¬´–¶–∏–Ω –ß–∞¬ª

*–°–æ—Å—Ç–∞–≤:*
- –£–ª—É–Ω
""", parse_mode="Markdown")
            ask_for_rating(call.message, "tonization")

        elif call.data == "productivity":
            photo_path = "Tea_grass1.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π* üçµ
–¢—Ä–∞–≤—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –º–Ω–æ–≥–æ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤, –∑–∞ —Å—á—ë—Ç —á–µ–≥–æ —Å–ø–æ—Å–æ–±–Ω—ã –∑–∞—Ä—è–¥–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π

*–°–æ—Å—Ç–∞–≤:*
- –¢—Ä–∞–≤—ã (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —á–∞—è)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "productivity")
            
        elif call.data == "vitamins2":
            photo_path = "Tea_white.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ë–µ–ª—ã–π —á–∞–π* üçµ
–ü–æ–¥–≤–µ—Ä–≥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ ‚Äî –ø–æ —Å—É—Ç–∏, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã—Å—É—à–µ–Ω–Ω—ã–µ ‚Ä®–º–æ–ª–æ–¥—ã–µ –ª–∏—Å—Ç–æ—á–∫–∏ –∏ –ø–æ—á–∫–∏. –í –Ω–∏—Ö –ø–æ –º–∞–∫—Å–∏–º—É–º—É, –∫–∞–∫ –∏ –≤ –∑–µ–ª—ë–Ω–æ–º —á–∞–µ, —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤—Å–µ ‚Ä®–ø–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω—ã

*–°–æ—Å—Ç–∞–≤:*
- –ë–µ–ª—ã–π —á–∞–π
""", parse_mode="Markdown")
            ask_for_rating(call.message, "vitamins2")

def lose_weight(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    metabolism = types.InlineKeyboardButton(text="1", callback_data="metabolism")
    nofat = types.InlineKeyboardButton(text="2", callback_data="nofat")
    appetite = types.InlineKeyboardButton(text="3", callback_data="appetite")
    sugar = types.InlineKeyboardButton(text="4", callback_data="sugar")
    bioactive = types.InlineKeyboardButton(text="5", callback_data="bioactive")
    keyboard.add(metabolism, nofat, appetite, sugar, bioactive)
    
    bot.send_message(message.chat.id, """üßò‚Äç‚ôÄ –ö–∞–∫–∏–º –º–µ—Ç–æ–¥–æ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Ö—É–¥–µ—Ç—å?

*1)* –£—Å–∫–æ—Ä–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
*2)* –û–∫–∏—Å–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤
*3)* –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –∞–ø–ø–µ—Ç–∏—Ç–∞
*4)* –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏
*5)* –ë–∏–æ–¥–æ–±–∞–≤–∫–∞
""", reply_markup=keyboard, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data in ["metabolism", "nofat", "appetite", "sugar", "bioactive"]) 
def callback_inline8(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "metabolism":
            photo_path = "Tea_green1.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ó–µ–ª—ë–Ω—ã–π —á–∞–π* üçµ
–û–±–ª–∞–¥–∞–µ—Ç –º—è–≥–∫–∏–º –º–æ—á–µ–≥–æ–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ç–µ—Ö–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–∫–æ—Ä—è—é—Ç ‚Ä®–æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤

*–°–æ—Å—Ç–∞–≤:*
- –ó–µ–ª—ë–Ω—ã–π —á–∞–π
""", parse_mode="Markdown")
            ask_for_rating(call.message, "metabolism")
            
        elif call.data == "nofat":
            photo_path = "Tea_mate.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π –º–∞—Ç–µ* üçµ
–ò–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑ –ª–∏—Å—Ç—å–µ–≤ –ü–∞—Ä–∞–≥–≤–∞–π—Å–∫–æ–≥–æ –ø–∞–¥—É–±–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏—Ç–∞–º–∏–Ω—ã, ‚Ä®–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –∏ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã
–ú–∞—Ç–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–∫–∏—Å–ª–µ–Ω–∏—è –∂–∏—Ä–æ–≤ –≤ ‚Ä®–æ—Ä–≥–∞–Ω–∏–∑–º–µ –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –∂–∏—Ä–æ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫

*–°–æ—Å—Ç–∞–≤:*
- –°—É—à—ë–Ω—ã–µ –ª–∏—Å—Ç—å—è –ø–∞—Ä–∞–≥–≤–∞–π—Å–∫–æ–≥–æ –ø–∞–¥—É–±–∞ 
""", parse_mode="Markdown")
            ask_for_rating(call.message, "nofat")
            
        elif call.data == "appetite":
            photo_path = "Tea_puer.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ü—É—ç—Ä* üçµ
–ü–æ–Ω–∏–∂–∞–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –≤ –Ω–æ—Ä–º—É —Ä–∞–±–æ—Ç—É –ñ–ö–¢. –°–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Ä®–≤–∞–∂–Ω—ã—Ö –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤

*–°–æ—Å—Ç–∞–≤:*
- –ü—É—ç—Ä —á–∞–π
""", parse_mode="Markdown")
            ask_for_rating(call.message, "appetite")

        elif call.data == "sugar":
            photo_path = "Tea_roibush.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–†–æ–π–±—É—à* üçµ
–ü–æ–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏, –æ–±–ª–∞–¥–∞–µ—Ç –º–æ—á–µ–≥–æ–Ω–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º

*–°–æ—Å—Ç–∞–≤:*
- –ò–∑–º–µ–ª—å—á—ë–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è –∫—É—Å—Ç–∞—Ä–Ω–∏–∫–∞ –ê—Å–ø–∞–ª–∞—Ç—É—Å –ª–∏–Ω–µ–π–Ω—ã–π
- –ú–µ–¥/—Å–∞—Ö–∞—Ä (–ø–æ –≤–∫—É—Å—É)
- –ú–æ–ª–æ–∫–æ (–ø–æ –≤–∫—É—Å—É)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "sugar")
            
        elif call.data == "bioactive":
            photo_path = "Tea_Altai.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–§–∏—Ç–æ —á–∞–π —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –∞–ª—Ç–∞–π—Å–∫–∏–π —Ç—Ä–∞–≤–Ω–∏–∫* üçµ
–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–±–∞–≤–∫–∞ –∫ –ø–∏—â–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∂–∏—Ä–æ–≤–æ–π –æ–±–º–µ–Ω, ‚Ä®—É–º–µ–Ω—å—à–∞–µ—Ç –≤—Å–∞—Å—ã–≤–∞–Ω–∏–µ –∂–∏—Ä–æ–≤ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–º—É –≤—ã–≤–æ–¥–∏—Ç—å —Å–∫–æ–ø–ª–µ–Ω–∏—è —à–ª–∞–∫–æ–≤ –∏ ‚Ä®—Ç–æ–∫—Å–∏–Ω–æ–≤

*–°–æ—Å—Ç–∞–≤:*
- –°—Ç–æ–ª–±–∏–∫–∏ —Å —Ä—ã–ª—å—Ü–∞–º–∏ –∫—É–∫—É—Ä—É–∑—ã
- –¢—Ä–∞–≤–∞ –≥–æ—Ä—Ü–∞ –ø—Ç–∏—á—å–µ–≥–æ (—Å–ø–æ—Ä—ã—à–∞)
- –ö–æ—Ä–Ω–µ–≤–∏—â–∞ –∏–º–±–∏—Ä—è
- –ó–µ–ª—ë–Ω—ã–π —á–∞–π
- –ú—è—Ç–∞ –ø–µ—Ä–µ—á–Ω–∞—è
""", parse_mode="Markdown")
            ask_for_rating(call.message, "bioactive")

def other(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    milk = types.InlineKeyboardButton(text="–° –º–æ–ª–æ–∫–æ–º", callback_data="milk")
    nomilk = types.InlineKeyboardButton(text="–ë–µ–∑ –º–æ–ª–æ–∫–∞", callback_data="nomilk")
    keyboard.add(milk, nomilk)
    
    bot.send_message(message.chat.id, """ü•õ –ß–∞–π —Å –º–æ–ª–æ–∫–æ–º –∏–ª–∏ –±–µ–∑?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["milk", "nomilk"]) 
def callback_inline9(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "milk":
            milktea(call.message)
            
        elif call.data == "nomilk":
            no_milktea(call.message)

def milktea(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    india = types.InlineKeyboardButton(text="–ò–Ω–¥–∏—è", callback_data="india")
    taiwan = types.InlineKeyboardButton(text="–¢–∞–π–≤–∞–Ω—å", callback_data="taiwan")
    asia = types.InlineKeyboardButton(text="–Æ–∂–Ω–∞—è –ê–∑–∏—è", callback_data="asia")
    hongkong = types.InlineKeyboardButton(text="–ì–æ–Ω–≥-–ö–æ–Ω–≥", callback_data="hongkong")
    keyboard.add(india, taiwan, asia, hongkong)
    
    bot.send_message(message.chat.id, """üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["india", "taiwan", "asia", "hongkong"]) 
def callback_inline10(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "india":
            photo_path = "Tea_masala.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ú–∞—Å–∞–ª–∞* üçµ
–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω–¥–∏–π—Å–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫. –í –ò–Ω–¥–∏–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—Ä–∞—Å–Ω—ã–π –≥—Ä–∞–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–π —Å ‚Ä®–º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π CTC.

*–°–æ—Å—Ç–∞–≤:*
- –ß–∞–π
- –ü—Ä—è–Ω–æ—Å—Ç–∏
- –ú–æ–ª–æ–∫–æ
- –ü–æ–¥—Å–ª–∞—Å—Ç–∏—Ç–µ–ª—å ‚Ä®
""", parse_mode="Markdown")
            ask_for_rating(call.message, "india")
            
        elif call.data == "taiwan":
            photo_path = "Tea_bubble.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ë–∞–±–ª-—Ç–∏ (—á–∞–π —Å —à–∞—Ä–∏–∫–∞–º–∏)* üçµ
–í –æ—Å–Ω–æ–≤–µ –±–∞–±–ª-—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã —á–∞—è, –≤–∫–ª—é—á–∞—è —á—ë—Ä–Ω—ã–π, –∑–µ–ª—ë–Ω—ã–π, —É–ª—É–Ω –∏ —Å ‚Ä®–∂–∞—Å–º–∏–Ω–æ–º

*–°–æ—Å—Ç–∞–≤:*
- –ß–∞–π
- –ú–æ–ª–æ–∫–æ
- –®–∞—Ä–∏–∫–∏ –∏–∑ —Ç–∞–ø–∏–æ–∫–∏
- –ö—É—Å–æ—á–∫–∏ –∂–µ–ª–µ
- –í–∫—É—Å–æ–≤—ã–µ –¥–æ–±–∞–≤–∫–∏
""", parse_mode="Markdown")
            ask_for_rating(call.message, "taiwan")
            
        elif call.data == "asia":
            photo_path = "Tea_doodh.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *Doodh pati chai* üçµ
–ß–∞–π–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã–π –≤ –ò–Ω–¥–∏–∏, –ü–∞–∫–∏—Å—Ç–∞–Ω–µ, –ë–∞–Ω–≥–ª–∞–¥–µ—à, –ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω–µ –∏ ‚Ä®–ù–µ–ø–∞–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–ª–æ–∫–æ –≤–º–µ—Å—Ç–µ —Å —Å–∞—Ö–∞—Ä–æ–º –∑–∞–≤–∞—Ä–∏–≤–∞—é—Ç —Å —á–∞–µ–º.
–î—É–¥ –ø–∞—Ç–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç ‚Ä®—Å–∞–∞–¥–∞ —á–∞—è —Ç–µ–º, —á—Ç–æ –≤ –Ω–µ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –º–æ–ª–æ–∫–æ –∏ —á–∞–π.

*–°–æ—Å—Ç–∞–≤:*
- –ß–∞–π
- –ú–æ–ª–æ–∫–æ
- –°–∞—Ö–∞—Ä
- –°–ø–µ—Ü–∏–∏
""", parse_mode="Markdown")
            ask_for_rating(call.message, "asia")

        elif call.data == "hongkong":
            photo_path = "Tea_HongKong.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *Hong Kong‚Äìstyle milk tea* üçµ
–ù–∞–ø–∏—Ç–æ–∫ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ 20 –≤–µ–∫–∞, –≤–æ –≤—Ä–µ–º–µ–Ω–∞ –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ì–æ–Ω–∫–æ–Ω–≥–µ, –∏ ‚Ä®–±—ã–ª –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω –±—Ä–∏—Ç–∞–Ω—Å–∫–∏–º –ø–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–º —á–∞–µ–ø–∏—Ç–∏–µ–º

*–°–æ—Å—Ç–∞–≤:*
- –ß–µ—Ä–Ω—ã–π —á–∞–π (–¶–µ–π–ª–æ–Ω)
- –°–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ
""", parse_mode="Markdown")
            ask_for_rating(call.message, "hongkong")

def no_milktea(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    rice = types.InlineKeyboardButton(text="–° —Ä–∏—Å–æ–º", callback_data="rice")
    ice = types.InlineKeyboardButton(text="–•–æ–ª–æ–¥–Ω—ã–π —á–∞–π", callback_data="ice")
    mushroom = types.InlineKeyboardButton(text="–ì—Ä–∏–±", callback_data="mushroom")
    other1 = types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="other1")
    keyboard.add(rice, ice, mushroom, other1)
    
    bot.send_message(message.chat.id, """‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—è""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["rice", "ice", "mushroom", "other1"]) 
def callback_inline11(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "rice":
            photo_path = "Tea_rice.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *Brown rice green tea* üçµ
–°—á–∏—Ç–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º, —á–µ–º –æ–±—ã—á–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π —á–∞–π, —Ç–∞–∫ –∫–∞–∫ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ä–∏—Å ‚Ä®–æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤. ‚Ä®
–ú–æ–∂–Ω–æ –ø–∏—Ç—å –∫–∞–∫ –≥–æ—Ä—è—á–∏–º, —Ç–∞–∫ –∏ —Ö–æ–ª–æ–¥–Ω—ã–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ‚Ä®–∑–∞–≤—Ç—Ä–∞–∫–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞

*–°–æ—Å—Ç–∞–≤:*
- –ó–µ–ª—ë–Ω—ã–π —á–∞–π
- –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ä–∏—Å
""", parse_mode="Markdown")
            ask_for_rating(call.message, "rice")
            
        elif call.data == "ice":
            icetea(call.message)
            
        elif call.data == "mushroom":
            photo_path = "Tea_mushroom.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ß–∞–π–Ω—ã–π –≥—Ä–∏–± (–∫–æ–º–±—É—á–∞)* üçµ
–§–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—é—Ç –∏–∑ —Å–∏–º–±–∏–æ–∑–∞ –¥—Ä–æ–∂–∂–µ–π –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö ‚Ä®–±–∞–∫—Ç–µ—Ä–∏–π
–ò—Å—Ç–æ—Ä–∏—è –Ω–∞–ø–∏—Ç–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –¥–≤—É—Ö —Ç—ã—Å—è—á –ª–µ—Ç –Ω–∞–∑–∞–¥: –≤–ø–µ—Ä–≤—ã–µ —á–∞–π–Ω—ã–π –≥—Ä–∏–± ‚Ä®—É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ª–µ—Ç–æ–ø–∏—Å—è—Ö –∑–∞ 200 –ª–µ—Ç –¥–æ –Ω–∞—à–µ–π —ç—Ä—ã

*–°–æ—Å—Ç–∞–≤:*
- –ß–∞–π–Ω—ã–π –≥—Ä–∏–± (–∫–æ–º–±—É—á–∞)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "mushroom")


        elif call.data == "other1":
            other2(call.message)


def icetea(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    lemon = types.InlineKeyboardButton(text="–° –ª–∏–º–æ–Ω–æ–º", callback_data="lemon")
    strawberry = types.InlineKeyboardButton(text="–° –∫–ª—É–±–Ω–∏–∫–æ–π", callback_data="strawberry")
    raspberry = types.InlineKeyboardButton(text="–° –º–∞–ª–∏–Ω–æ–π", callback_data="raspberry")
    berry = types.InlineKeyboardButton(text="–° —è–≥–æ–¥–∞–º–∏", callback_data="berry")
    keyboard.add(lemon, strawberry, raspberry, berry)
    
    bot.send_message(message.chat.id, """üßä –ö–∞–∫–æ–π —á–∞–π —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø–∏—Ç—å?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["lemon", "strawberry", "raspberry", "berry"]) 
def callback_inline12(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "lemon":
            photo_path = "Tea_lemon.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–•–æ–ª–æ–¥–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π —á–∞–π —Å –ª–∏–º–æ–Ω–æ–º –∏ –º—è—Ç–æ–π* üçµ

*–°–æ—Å—Ç–∞–≤:*
- –ó–µ–ª—ë–Ω—ã–π —á–∞–π
- –ú—è—Ç–∞
- –õ–∏–º–æ–Ω
- –°–∏—Ä–æ–ø —Ç–æ–ø–∏–Ω–∞–º–±—É—Ä–∞
- –õ–µ–¥
""", parse_mode="Markdown")
            ask_for_rating(call.message, "lemon")
            
        elif call.data == "strawberry":
            photo_path = "Tea_strawberry.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–•–æ–ª–æ–¥–Ω—ã–π —á–∞–π —Å –∫–ª—É–±–Ω–∏–∫–æ–π* üçµ

*–°–æ—Å—Ç–∞–≤:*
- –ö–ª—É–±–Ω–∏–∫–∞
- –ß–∞–π –∑–µ–ª—ë–Ω—ã–π —Å —Ü–≤–µ—Ç–∫–∞–º–∏ –∂–∞—Å–º–∏–Ω–∞
- –õ–∏–º–æ–Ω
- –õ–µ–¥ ‚Ä®
""", parse_mode="Markdown")
            ask_for_rating(call.message, "strawberry")
            
        elif call.data == "raspberry":
            photo_path = "Tea_raspberry1.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–•–æ–ª–æ–¥–Ω—ã–π —á–∞–π —Å –ø–µ—Ä—Å–∏–∫–∞–º–∏ –∏ –º–∞–ª–∏–Ω–æ–π* üçµ

*–°–æ—Å—Ç–∞–≤:*
- –¢—Ä–∞–≤—è–Ω–æ–π —Å–±–æ—Ä
- –ú—è—Ç–∞
- –ü–µ—Ä—Å–∏–∫–∏
- –ú–∞–ª–∏–Ω–∞
- –õ–µ–¥ 
""", parse_mode="Markdown")
            ask_for_rating(call.message, "raspberry")

        elif call.data == "berry":
            photo_path = "Tea_berry.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–•–æ–ª–æ–¥–Ω—ã–π —á–∞–π –∫–∞—Ä–∫–∞–¥–µ —Å —è–≥–æ–¥–∞–º–∏* üçµ

*–°–æ—Å—Ç–∞–≤:*
- –ß–∞–π –∫–∞—Ä–∫–∞–¥–µ
- –õ–∏—Å—Ç—å—è —Å–º–æ—Ä–æ–¥–∏–Ω—ã
- –Ø–≥–æ–¥—ã (–º–∞–ª–∏–Ω–∞ / –µ–∂–µ–≤–∏–∫–∞ / —Å–º–æ—Ä–æ–¥–∏–Ω–∞ / –≤–∏—à–Ω—è)
""", parse_mode="Markdown")
            ask_for_rating(call.message, "berry")

def other2(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    black_berry = types.InlineKeyboardButton(text="–ß–µ—Ä–Ω—ã–π —è–≥–æ–¥–Ω—ã–π —á–∞–π", callback_data="black_berry")
    fruit_berry = types.InlineKeyboardButton(text="–§—Ä—É–∫—Ç–æ–≤–æ-—è–≥–æ–¥–Ω—ã–π —á–∞–π", callback_data="fruit_berry")
    keyboard.add(black_berry, fruit_berry)
    
    bot.send_message(message.chat.id, """ü´ñ –ö–∞–∫–æ–π —á–∞–π —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø–∏—Ç—å?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["black_berry", "fruit_berry"]) 
def callback_inline13(call):
    chat_id = call.message.chat.id
    if call.message: 
        if call.data == "black_berry":
            photo_path = "Tea_black_berry.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–°–∏–ª–∞ –°–∏–±–∏—Ä–∏* üçµ

 *–°–æ—Å—Ç–∞–≤:*
- –õ–∞–ø—Å–∞–Ω–≥ —Å—É—à–æ–Ω–≥
- –Ø–≥–æ–¥—ã –º–æ–∂–µ–≤–µ–ª—å–Ω–µ–∫–∞
- –ë–æ—è—Ä—ã—à–Ω–∏–∫
- –°–æ—Å–Ω–æ–≤—ã–µ –ø–æ—á–∫–∏
- –õ–∏—Å—Ç—å—è —Å–º–æ—Ä–æ–¥–∏–Ω—ã
- –ö–ª—é–∫–≤–∞
- –ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Å–ª–∞
""", parse_mode="Markdown")
            ask_for_rating(call.message, "black_berry")
            
        elif call.data == "fruit_berry":
            photo_path = "Tea_fruit_berry.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            bot.send_message(chat_id, """üçµ *–ì—Ä–∞—Ñ –û—Ä–ª–æ–≤* üçµ
–ù–∞–ø–∏—Ç–æ–∫ –Ω–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –≥—Ä–∞—Ñ–∞ –û—Ä–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–ª —á—ë—Ä–Ω—ã–π —á–∞–π —Å ‚Ä®–¥–æ–±–∞–≤–∫–∞–º–∏

*–°–æ—Å—Ç–∞–≤:*
- –õ–∏—Å—Ç—å—è —á—ë—Ä–Ω–æ–≥–æ –∏–Ω–¥–∏–π—Å–∫–æ–≥–æ —á–∞—è
- –õ–µ–ø–µ—Å—Ç–∫–∏ –≤–∞—Å–∏–ª—å–∫–∞
- –õ–∏—Å—Ç—å—è —Å–∞—Ñ–ª–æ—Ä—ã
- –Ø–≥–æ–¥—ã ‚Ä®–∫—Ä–∞—Å–Ω–æ–π —Å–º–æ—Ä–æ–¥–∏–Ω—ã
- –ú–∞–ª–∏–Ω–∞ 
""", parse_mode="Markdown")
            ask_for_rating(call.message, "fruit_berry")

def menu11(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu1 = types.KeyboardButton("""–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""")
    other = types.KeyboardButton("""–î—Ä—É–≥–æ–µ - —ç—Ç–æ —á—Ç–æ?""")
    keyboard.add(menu1, other)
    menu12(message)

def menu12(message):
    if(message.text == """üìí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""):
        start(message)

    elif(message.text == """üîß –î—Ä—É–≥–æ–µ - —ç—Ç–æ —á—Ç–æ?"""):
        
        bot.send_message(message.chat.id, text="""*1. –î–ª—è —á–µ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–∏—Ç—å —á–∞–π?*
–ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å:
‚Ä¢	–î–ª—è –±–æ–¥—Ä–æ—Å—Ç–∏ 
‚Ä¢	–î–ª—è —Å–Ω–∞
‚Ä¢	–î–ª—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∏—è
‚Ä¢	–£—Å—Ç–∞–ª–æ—Å—Ç—å (–≤—è–ª–æ—Å—Ç—å)
‚Ä¢	‚Ä¶
‚Ä¢	–ò —Ç–∞–∫ –¥–∞–ª–µ–µ


*2. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—è*
–ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å:
‚Ä¢	–í–∫—É—Å–Ω—ã–π –∑–∞–ø–∞—Å
‚Ä¢	–ù–∞ –æ—Å–Ω–æ–≤–µ —è–≥–æ–¥
‚Ä¢	‚Ä¶
‚Ä¢	–ù–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π

""", parse_mode="Markdown")
        return

def test(message):
    user_id = message.from_user.id
    
    keyboard = types.InlineKeyboardMarkup()
    yes_11 = types.InlineKeyboardButton(text="–î–∞", callback_data="yes_11")
    
    no_11 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_11")
    
    keyboard.add(yes_11, no_11)
    
    bot.send_message(message.chat.id, """ü§î –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π —Ç—ã —á–∞–π?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["yes_11", "no_11"]) 
def callback_inline14(call):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id
    
    if call.message: 
        if call.data == "yes_11":
            test11(call.message)
            
        elif call.data == "no_11":
            bot.send_message(chat_id, """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""")
            mode1(call.message)

def test11(message):
    user_id = message.from_user.id

    photo_path = "Tea_collage.jpg"
    with open(photo_path, "rb") as photo:
        bot.send_photo(message.chat.id, photo)

    
    keyboard = types.InlineKeyboardMarkup()
    forest = types.InlineKeyboardButton(text="1", callback_data="forest")
    
    chinese = types.InlineKeyboardButton(text="2", callback_data="chinese")
    
    indian = types.InlineKeyboardButton(text="3", callback_data="indian")
    
    savana = types.InlineKeyboardButton(text="4", callback_data="savana")
    
    city = types.InlineKeyboardButton(text="5", callback_data="city")
    
    spring = types.InlineKeyboardButton(text="6", callback_data="spring")
    
    winter = types.InlineKeyboardButton(text="7", callback_data="winter")
    
    undefined = types.InlineKeyboardButton(text="8", callback_data="undefined")
    keyboard.add(forest, chinese, indian, savana, city, spring, winter, undefined)
    
    bot.send_message(message.chat.id, """üåÑ –ö–∞–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–æ–ª—å—à–µ —Ç–µ–±–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["forest", "chinese", "indian", "savana", "city", "spring", "winter", "undefined"]) 
def callback_inline14(call):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id
    
    if call.message: 
        if call.data == "forest":
            test_points[user_id] = test_points.get(user_id, 0) + 8
            
        elif call.data == "chinese":
            test_points[user_id] = test_points.get(user_id, 0) + 7

        elif call.data == "indian":
            test_points[user_id] = test_points.get(user_id, 0) + 6
            
        elif call.data == "city":
            test_points[user_id] = test_points.get(user_id, 0) + 5

        elif call.data == "spring":
            test_points[user_id] = test_points.get(user_id, 0) + 4
            
        elif call.data == "winter":
            test_points[user_id] = test_points.get(user_id, 0) + 3

        elif call.data == "savana":
            test_points[user_id] = test_points.get(user_id, 0) + 2
            
        elif call.data == "undefined":
            test_points[user_id] = test_points.get(user_id, 0) + 1
            
    test2(call.message)

def test2(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    friendly = types.InlineKeyboardButton(text="–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="friendly")
    
    wisdom = types.InlineKeyboardButton(text="–ú—É–¥—Ä–æ—Å—Ç—å", callback_data="wisdom")
    
    calm = types.InlineKeyboardButton(text="–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", callback_data="calm")
    
    relax = types.InlineKeyboardButton(text="–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å", callback_data="relax")
    
    polite = types.InlineKeyboardButton(text="–í–µ–∂–ª–∏–≤–æ—Å—Ç—å", callback_data="polite")
    
    energy = types.InlineKeyboardButton(text="–≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å", callback_data="energy")
    
    intelegence = types.InlineKeyboardButton(text="–í—ã—Å—à–∏–π —Ä–∞–∑—É–º", callback_data="intelegence")
    
    closure = types.InlineKeyboardButton(text="–ó–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å", callback_data="closure")
    keyboard.add(friendly, wisdom, calm, relax, polite, energy, intelegence, closure)
    
    bot.send_message(message.chat.id, """üî§ –ö–∞–∫–∏–º —Å–ª–æ–≤–æ–º —Ç—ã —Å–µ–±—è –æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—à—å?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["friendly", "wisdom", "calm", "relax", "polite", "energy", "intelegence", "closure"]) 
def callback_inline15(call):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id
    
    if call.message: 
        if call.data == "friendly":
            test_points[user_id] = test_points.get(user_id, 0) + 8
            
        elif call.data == "wisdom":
             test_points[user_id] = test_points.get(user_id, 0) + 7

        elif call.data == "calm":
            test_points[user_id] = test_points.get(user_id, 0) + 6
            
        elif call.data == "relax":
           test_points[user_id] = test_points.get(user_id, 0) + 5

        elif call.data == "polite":
            test_points[user_id] = test_points.get(user_id, 0) + 4
            
        elif call.data == "energy":
            test_points[user_id] = test_points.get(user_id, 0) + 3

        elif call.data == "intelegence":
           test_points[user_id] = test_points.get(user_id, 0) + 2
            
        elif call.data == "closure":
           test_points[user_id] = test_points.get(user_id, 0) + 1
            
    test3(call.message)

def test3(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    laziness = types.InlineKeyboardButton(text="–§–ª–µ–≥–º–∞—Ç–∏–∫", callback_data="laziness")
    
    joy = types.InlineKeyboardButton(text="–°–∞–Ω–≥–≤–∏–Ω–∏–∫", callback_data="joy")
    
    anger = types.InlineKeyboardButton(text="–•–æ–ª–µ—Ä–∏–∫", callback_data="anger")
    
    sadness = types.InlineKeyboardButton(text="–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫", callback_data="sadness")
    
    not_me = types.InlineKeyboardButton(text="–≠—Ç–æ –Ω–µ –ø—Ä–æ –º–µ–Ω—è", callback_data="not_me")
    keyboard.add(laziness, joy, anger, sadness, not_me)
    
    bot.send_message(message.chat.id, """üéö –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["laziness", "joy", "anger", "sadness", "not_me"]) 
def callback_inline16(call):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id
    
    if call.message: 
        if call.data == "laziness":
            test_points[user_id] = test_points.get(user_id, 0) + 5
            
        elif call.data == "joy":
             test_points[user_id] = test_points.get(user_id, 0) + 4

        elif call.data == "anger":
            test_points[user_id] = test_points.get(user_id, 0) + 3
            
        elif call.data == "sadness":
           test_points[user_id] = test_points.get(user_id, 0) + 2

        elif call.data == "not_me":
            test_points[user_id] = test_points.get(user_id, 0) + 1
            
    test4(call.message)

def test4(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    bagel = types.InlineKeyboardButton(text="–°—É—à–∫–∏", callback_data="bagel")
    
    nothing = types.InlineKeyboardButton(text="–ù–∏—á–µ–≥–æ", callback_data="nothing")
    
    honey = types.InlineKeyboardButton(text="–•–∞–ª–≤–∞/–º–µ–¥", callback_data="honey")
    
    water = types.InlineKeyboardButton(text="–í–æ–¥—É", callback_data="water")
    
    sandwitch = types.InlineKeyboardButton(text="–í—ã–ø–µ—á–∫–∞", callback_data="sandwitch")

    chocolate = types.InlineKeyboardButton(text="–®–æ–∫–æ–ª–∞–¥", callback_data="chocolate")
    
    cookie = types.InlineKeyboardButton(text="–ü–µ—á–µ–Ω—å–µ", callback_data="cookie")
    
    anything = types.InlineKeyboardButton(text="–í—Å–µ", callback_data="anything")
    keyboard.add(bagel, nothing, honey, water, sandwitch, chocolate, cookie, anything)
    
    bot.send_message(message.chat.id, """üç™ –ß—Ç–æ —Ç—ã –æ–±—ã—á–Ω–æ –µ—à—å —Å —á–∞–µ–º?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["bagel", "nothing", "honey", "water", "sandwitch", "chocolate", "cookie", "anything"]) 
def callback_inline17(call):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id
    
    if call.message: 
        if call.data == "bagel":
            test_points[user_id] = test_points.get(user_id, 0) + 8
            
        elif call.data == "nothing":
             test_points[user_id] = test_points.get(user_id, 0) + 7

        elif call.data == "honey":
            test_points[user_id] = test_points.get(user_id, 0) + 6
            
        elif call.data == "water":
           test_points[user_id] = test_points.get(user_id, 0) + 5

        elif call.data == "sandwitch":
            test_points[user_id] = test_points.get(user_id, 0) + 4

        elif call.data == "chocolate":
            test_points[user_id] = test_points.get(user_id, 0) + 3
            
        elif call.data == "cookie":
           test_points[user_id] = test_points.get(user_id, 0) + 2

        elif call.data == "anything":
            test_points[user_id] = test_points.get(user_id, 0) + 1
            
    test5(call.message)

def test5(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text="–î–∞", callback_data="yes")
    no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
    keyboard.add(yes, no)
    
    bot.send_message(message.chat.id, """üßÇ –ü—å–µ—à—å —á–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no"]) 
def callback_inline18(call):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id
    
    if call.message: 
        if call.data == "yes":
            test_points[user_id] = test_points.get(user_id, 0) + 1
            
        elif call.data == "no":
             test_points[user_id] = test_points.get(user_id, 0) + 5
            
    test6(call.message)

def test6(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    tea2 = types.InlineKeyboardButton(text="–ß–∞–π", callback_data="tea2")
    
    water1 = types.InlineKeyboardButton(text="–í–æ–¥–∞", callback_data="water1")
    
    milk1 = types.InlineKeyboardButton(text="–ú–æ–ª–æ–∫–æ", callback_data="milk1")
    
    juice = types.InlineKeyboardButton(text="–°–æ–∫", callback_data="juice")
    
    cocao = types.InlineKeyboardButton(text="–ö–∞–∫–∞–æ", callback_data="cocao")
    
    air = types.InlineKeyboardButton(text="–í–æ–∑–¥—É—Ö", callback_data="air")
    
    coffee = types.InlineKeyboardButton(text="–ö–æ—Ñ–µ", callback_data="coffee")
    
    no_list = types.InlineKeyboardButton(text="–ù–µ—Ç –≤ —Å–ø–∏—Å–∫–µ", callback_data="no_list")
    keyboard.add(tea2, water1, milk1, juice, cocao, air, coffee, no_list)
    
    bot.send_message(message.chat.id, """üßã –¢–≤–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["tea2", "water1", "milk1", "juice", "cocao", "air", "coffee", "no_list"]) 
def callback_inline19(call):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id
    
    if call.message: 
        if call.data == "tea2":
            test_points[user_id] = test_points.get(user_id, 0) + 8
            
        elif call.data == "water1":
             test_points[user_id] = test_points.get(user_id, 0) + 7

        elif call.data == "milk1":
             test_points[user_id] = test_points.get(user_id, 0) + 6

        elif call.data == "juice":
             test_points[user_id] = test_points.get(user_id, 0) + 3

        elif call.data == "cocao":
             test_points[user_id] = test_points.get(user_id, 0) + 4

        elif call.data == "air":
             test_points[user_id] = test_points.get(user_id, 0) + 5

        elif call.data == "coffee":
             test_points[user_id] = test_points.get(user_id, 0) + 1

        elif call.data == "no_list":
             test_points[user_id] = test_points.get(user_id, 0) + 2
            
    test7(call.message)

def test7(message):
    user_id = message.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    tea3 = types.InlineKeyboardButton(text="–ß–∞–π", callback_data="tea3")
    
    only_tea = types.InlineKeyboardButton(text="–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ —á–∞–π", callback_data="only_tea")
    
    teeeaa = types.InlineKeyboardButton(text="–ß–∞–∞–∞–∞–∞–∞–π", callback_data="teeeaa")
    
    no_matter = types.InlineKeyboardButton(text="–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", callback_data="no_matter")
    
    coffee1 = types.InlineKeyboardButton(text="–ö–æ—Ñ–µ", callback_data="coffee1")
    
    nothing1 = types.InlineKeyboardButton(text="–ù–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ", callback_data="nothing1")
    keyboard.add(tea3, only_tea, teeeaa, no_matter, coffee1, nothing1)
    
    bot.send_message(message.chat.id, """ü´ñ –ö–æ—Ñ–µ –∏–ª–∏ —á–∞–π?""", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["tea3", "only_tea", "teeeaa", "no_matter", "coffee1", "nothing1"]) 
def callback_inline20(call):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id
    
    if call.message: 
        if call.data == "tea3":
            test_points[user_id] = test_points.get(user_id, 0) + 6
            
        elif call.data == "only_tea":
             test_points[user_id] = test_points.get(user_id, 0) + 5

        elif call.data == "teeeaa":
             test_points[user_id] = test_points.get(user_id, 0) + 4

        elif call.data == "no_matter":
             test_points[user_id] = test_points.get(user_id, 0) + 3

        elif call.data == "coffee1":
             test_points[user_id] = test_points.get(user_id, 0) + 1

        elif call.data == "nothing1":
             test_points[user_id] = test_points.get(user_id, 0) + 2
            
    test8(call.message)

def test8(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if message: 
        if test_points[user_id] >= 46:
            photo_path = "Tea_test1.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
            bot.send_message(chat_id, """üå≤ *–°–∏–ª–∞ –°–∏–±–∏—Ä–∏ (–†—É—Å—Å–∫–∏–π —á–∞–π)* üå≤
–¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –≤–µ–ª–∏–∫–æ–π —Å–∏–ª–æ–π –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∏ –¥—É—Ö–æ–≤–Ω–æ–π. –¢—ã –≤—ã–Ω–æ—Å–ª–∏–≤ –∏ —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –º–Ω–æ–≥–æ–µ. –¢–æ–ª—å–∫–æ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ —Ç—Ä—É–¥ –∏ —Ç—ã –¥–æ–≥—Ç–∏–≥–Ω–µ—à—å —Å—Ç–∞—Ç—É—Å–∞ –í—Å–µ–º–æ–≥—É—â–µ–≥–æ —á–∞—è
""", parse_mode="Markdown")
              
        elif test_points[user_id] >= 40:
            photo_path = "Tea_test2.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
            bot.send_message(chat_id, """üèÆ *–ü—É—ç—Ä (–ö–∏—Ç–∞–π—Å–∫–∏–π —á–∞–π)* üèÆ
–¢—ã –≤–µ–ª–∏–∫–∏–π –º—É–¥—Ä–µ—Ü —á–∞—è. –ï—Å–ª–∏ —Ç—ã –ø—Ä–µ–¥–∞—à—å—Å—è –≤–µ—Å—å —á–∞—é–≤–µ–¥–µ–Ω—å—é, —Ç–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –í—ã—Å—à–∏–º —Ä–∞–∑—É–º–æ–º
""", parse_mode="Markdown")

        elif test_points[user_id] >= 34:
            photo_path = "tea_test3.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
                bot.send_message(chat_id, """ü™∑ *–ú–∞—Å–∞–ª–∞-—á–∞–π (–ò–Ω–¥–∏–π—Å–∫–∏–π —á–∞–π)* ü™∑
–£ —Ç–µ–±—è —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è, –∂–∏–∑–Ω—Ä–∞–¥–æ—Å—Ç–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å. –¢—ã —Å–∫–æ—Ä–µ–µ –ª—é–±–∏—à—å –ª–µ—Ç–æ, —Ç–µ–ø–ª–æ, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Ç–∞–Ω—Ü—ã. –î–µ–ª–∞–π —Ç–æ, —á—Ç–æ –¥—É—à–∞ –ø—Ä–æ—Å–∏—Ç –∏ —Ç—ã —Å—Ç–∞–Ω–µ—à—å —Å–∞–º—ã–º —á–∞–π–Ω—ã–º —á–∞–µ–º –∏–∑ –≤—Å–µ—Ö —á–∞–µ–≤
""", parse_mode="Markdown")

        elif test_points[user_id] >= 28:
            photo_path = "Tea_test4.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
                bot.send_message(chat_id, """üßò‚Äç‚ôÇ *–ú–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π —á–∞–π (–õ–∞—Ö–ø–µ—Ç)* üßò‚Äç‚ôÇÔ∏è
–¢—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞ –∫–∞–π—Ñ–µ –≤—Å–µ –≤—Ä–µ–º—è. –¢—ã –Ω–µ –∑–Ω–∞–µ—à—å —Å–ª–æ–≤–∞ —à–æ–∫ –∏–ª–∏ —É–¥–∏–≤–ª–µ–Ω–∏–µ, –Ω–æ –∑–∞—Ç–æ —Ç—ã –ª–µ–≥–∫–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—à—å –ª—é–±—É—é —Å—Ç—Ä–µ—Å—Å–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é. –ù–µ –±—É–¥–µ—à—å –±—É–¥–µ—à—å - —Å—Ç–∞–Ω–µ—à—å —Ç–∞–∫–∏–º –∂–µ
""", parse_mode="Markdown")

        elif test_points[user_id] >= 22:
            photo_path = "Tea_test5.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
                bot.send_message(chat_id, """üé© *English breakfast tea (–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —á–∞–π)* üé©
–¢—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–≥ –∏ –ø—É–Ω–∫—Ç—É–∞–ª–µ–Ω, —á—Ç–æ —Ç–æ–ª—å–∫–æ —É–∫—Ä–∞—à–∞–µ—Ç —Ç–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å. –¢—ã –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç –≤–æ –≤—Å–µ–º. –û—Å—Ç–Ω–µ—à—å—Å—è —Ç–∞–∫–∏–º –∂–µ –∏ –ª—é–±–∞—è –Ω–∞—É–∫–∞ —Ç–µ–±–µ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞
""", parse_mode="Markdown")

        elif test_points[user_id] >= 18:
            photo_path = "Tea_test6.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
                bot.send_message(chat_id, """üçÉ *–°–µ–Ω—á–∞ (–ó–µ–ª–µ–Ω—ã–π —á–∞–π)* üçÉ
–ë–æ–¥—Ä–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å - –≤—Å–µ –ø—Ä–æ —Ç–µ–±—è. –ú–Ω–æ–≥–∏–µ –¥–∞–∂–µ —Å—á–∏—Ç–∞—é—Ç —Ç–µ–±—è –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º, –≤–µ–¥—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –Ω–µ –ø—Ä–æ —Ç–µ–±—è. –°—Ç–∞–Ω—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —á–∞–µ–º!
""", parse_mode="Markdown")

        elif test_points[user_id] >= 13:
            photo_path = "Tea_test7.png"
            with open(photo_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
                bot.send_message(chat_id, """üíß *–í–æ–¥–∞* üíß
H2O ‚Äî —Ö–∏–º–∏—á–µ—Å–∫–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ —Å–æ–±–æ–π –±–∏–Ω–∞—Ä–Ω–æ–µ –Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –º–æ–ª–µ–∫—É–ª–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö –∞—Ç–æ–º–æ–≤ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –æ–¥–Ω–æ–≥–æ –∞—Ç–æ–º–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞, —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–æ–±–æ–π –∫–æ–≤–∞–ª–µ–Ω—Ç–Ω–æ–π —Å–≤—è–∑—å—é
–¢—ã –Ω–µ –Ω–∞ —á—å–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —É —Ç–µ–±—è —Å–≤–æ—è —Å—Ç–æ—Ä–æ–Ω–∞

_–º–µ–∂–¥—É –∫–æ—Ñ–µ–º –∏ —á–∞–µ–º_
""", parse_mode="Markdown")

        elif test_points[user_id] >= 8:
            photo_path = "Tea_test8.jpg"
            with open(photo_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
                bot.send_message(chat_id, """‚òïÔ∏è *–ö–æ—Ñ–µ* ‚òïÔ∏è
–ê–ê–ê –¢—ã –Ω–µ —á–∞–π! –¢—ã –Ω–µ—á—Ç–æ –¥—Ä—É–≥–æ–µ - —Ç—ã –í–µ–ª–∏–∫–æ–µ –∫–æ—Ñ–µ
""", parse_mode="Markdown")



def ask_for_rating(message, tea_type=None):
    keyboard = types.InlineKeyboardMarkup()
    yes_btn = types.InlineKeyboardButton(text="–î–∞", callback_data=f"rate_yes_{tea_type}")
    no_btn = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"rate_no_{tea_type}")
    rating_btn = types.InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥", callback_data=f"rate_show_{tea_type}")
    keyboard.add(yes_btn, no_btn, rating_btn)
    bot.send_message(message.chat.id, "‚≠êÔ∏è –•–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —á–∞–π?", reply_markup=keyboard)

def ask_for_rating1(message, tea_type=None):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(1, 11):
        button = types.InlineKeyboardButton(text=str(i), callback_data=f"rating_{tea_type}_{i}")
        keyboard.add(button)
    bot.send_message(message.chat.id, "üåü –ü–æ—Å—Ç–∞–≤—å—Ç–µ —á–∞—é –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('rate_yes_', 'rate_no_', 'rate_show_', 'rating_')))
def handle_rating_callback(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    data = call.data.split('_')
    
    if data[0] == 'rate':
        tea_type = data[2] if len(data) > 2 else None
        
        if data[1] == 'yes':
            ask_for_rating1(call.message, tea_type)
        elif data[1] == 'no':
            bot.send_message(chat_id, """üõ∞–ù–∞–ø–∏—à–∏ /start , —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é""")
        elif data[1] == 'show':
            avg_rating = calculate_average_rating(tea_type)
            bot.send_message(chat_id, f"""üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —á–∞—è: {avg_rating:.1f}""")
    
    elif data[0] == 'rating':
        tea_type = data[1]
        rating = int(data[2])
        rating_user1.setdefault(user_id, {})[tea_type] = rating
        save_rating()
        bot.send_message(chat_id, f"""üèÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {rating}""")

        
def calculate_average_rating(tea_type):
    ratings = []
    for user_ratings in rating_user1.values():
        if tea_type in user_ratings:
            ratings.append(user_ratings[tea_type])
    return round(sum(ratings) / len(ratings), 1) if ratings else 0

def save_rating():
    with open(r_file, 'w', encoding='utf-8') as f:
        for user_id, ratings in rating_user1.items():
            for tea_type, rating in ratings.items():
                f.write(f"""{user_id}:{tea_type}:{rating}\n""")

@bot.message_handler(content_types=['text'])
def get_text(message):
    if(message.text == """üìí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""):
        start(message)

    elif(message.text == """üîß –î—Ä—É–≥–æ–µ - —ç—Ç–æ —á—Ç–æ?"""):
        
        bot.send_message(message.chat.id, text="""*1. –î–ª—è —á–µ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–∏—Ç—å —á–∞–π?*
–ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å:
‚Ä¢	–î–ª—è –±–æ–¥—Ä–æ—Å—Ç–∏ 
‚Ä¢	–î–ª—è —Å–Ω–∞
‚Ä¢	–î–ª—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∏—è
‚Ä¢	–£—Å—Ç–∞–ª–æ—Å—Ç—å (–≤—è–ª–æ—Å—Ç—å)
‚Ä¢	‚Ä¶
‚Ä¢	–ò —Ç–∞–∫ –¥–∞–ª–µ–µ


*2. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—è*
–ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å:
‚Ä¢	–í–∫—É—Å–Ω—ã–π –∑–∞–ø–∞—Å
‚Ä¢	–ù–∞ –æ—Å–Ω–æ–≤–µ —è–≥–æ–¥
‚Ä¢	‚Ä¶
‚Ä¢	–ù–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π

""", parse_mode="Markdown")

        
load_rating()

bot.polling(none_stop=True)
